/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork API
 * This API exposes endpoints to GeoNetwork API.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GnOgcApiRecordsThemeConceptsInnerDto } from './GnGnOgcApiRecordsThemeConceptsInnerDto';
import {
    GnOgcApiRecordsThemeConceptsInnerDtoFromJSON,
    GnOgcApiRecordsThemeConceptsInnerDtoFromJSONTyped,
    GnOgcApiRecordsThemeConceptsInnerDtoToJSON,
} from './GnGnOgcApiRecordsThemeConceptsInnerDto';

/**
 * A knowledge organization system used to classify the resource.
 * @export
 * @interface GnOgcApiRecordsThemeDto
 */
export interface GnOgcApiRecordsThemeDto {
    /**
     * One or more entity/concept identifiers from this knowledge system. it is recommended that a resolvable URI be used for each entity/concept identifier.
     * @type {Array<GnOgcApiRecordsThemeConceptsInnerDto>}
     * @memberof GnOgcApiRecordsThemeDto
     */
    concepts: Array<GnOgcApiRecordsThemeConceptsInnerDto>;
    /**
     * An identifier for the knowledge organization system used to classify the resource.  It is recommended that the identifier be a resolvable URI.  The list of schemes used in a searchable catalog can be determined by inspecting the server's OpenAPI document or, if the server implements CQL2, by exposing a queryable (e.g. named `scheme`) and enumerating the list of schemes in the queryable's schema definition.
     * @type {string}
     * @memberof GnOgcApiRecordsThemeDto
     */
    scheme: string;
}

/**
 * Check if a given object implements the GnOgcApiRecordsThemeDto interface.
 */
export function instanceOfGnOgcApiRecordsThemeDto(value: object): value is GnOgcApiRecordsThemeDto {
    if (!('concepts' in value) || value['concepts'] === undefined) return false;
    if (!('scheme' in value) || value['scheme'] === undefined) return false;
    return true;
}

export function GnOgcApiRecordsThemeDtoFromJSON(json: any): GnOgcApiRecordsThemeDto {
    return GnOgcApiRecordsThemeDtoFromJSONTyped(json, false);
}

export function GnOgcApiRecordsThemeDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): GnOgcApiRecordsThemeDto {
    if (json == null) {
        return json;
    }
    return {
        
        'concepts': ((json['concepts'] as Array<any>).map(GnOgcApiRecordsThemeConceptsInnerDtoFromJSON)),
        'scheme': json['scheme'],
    };
}

export function GnOgcApiRecordsThemeDtoToJSON(value?: GnOgcApiRecordsThemeDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'concepts': ((value['concepts'] as Array<any>).map(GnOgcApiRecordsThemeConceptsInnerDtoToJSON)),
        'scheme': value['scheme'],
    };
}

