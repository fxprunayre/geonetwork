/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork API
 * This API exposes endpoints to GeoNetwork API.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GnOgcApiRecordsFormatDto } from './GnGnOgcApiRecordsFormatDto';
import {
    GnOgcApiRecordsFormatDtoFromJSON,
    GnOgcApiRecordsFormatDtoFromJSONTyped,
    GnOgcApiRecordsFormatDtoToJSON,
} from './GnGnOgcApiRecordsFormatDto';
import type { GnOgcApiRecordsLicenseDto } from './GnGnOgcApiRecordsLicenseDto';
import {
    GnOgcApiRecordsLicenseDtoFromJSON,
    GnOgcApiRecordsLicenseDtoFromJSONTyped,
    GnOgcApiRecordsLicenseDtoToJSON,
} from './GnGnOgcApiRecordsLicenseDto';
import type { GnLanguage } from './GnGnLanguage';
import {
    GnLanguageFromJSON,
    GnLanguageFromJSONTyped,
    GnLanguageToJSON,
} from './GnGnLanguage';
import type { GnOgcApiRecordsContactDto } from './GnGnOgcApiRecordsContactDto';
import {
    GnOgcApiRecordsContactDtoFromJSON,
    GnOgcApiRecordsContactDtoFromJSONTyped,
    GnOgcApiRecordsContactDtoToJSON,
} from './GnGnOgcApiRecordsContactDto';
import type { GnOgcApiRecordsThemeDto } from './GnGnOgcApiRecordsThemeDto';
import {
    GnOgcApiRecordsThemeDtoFromJSON,
    GnOgcApiRecordsThemeDtoFromJSONTyped,
    GnOgcApiRecordsThemeDtoToJSON,
} from './GnGnOgcApiRecordsThemeDto';
import type { GnOgcApiRecordsRecordCommonPropertiesExternalIdsInnerDto } from './GnGnOgcApiRecordsRecordCommonPropertiesExternalIdsInnerDto';
import {
    GnOgcApiRecordsRecordCommonPropertiesExternalIdsInnerDtoFromJSON,
    GnOgcApiRecordsRecordCommonPropertiesExternalIdsInnerDtoFromJSONTyped,
    GnOgcApiRecordsRecordCommonPropertiesExternalIdsInnerDtoToJSON,
} from './GnGnOgcApiRecordsRecordCommonPropertiesExternalIdsInnerDto';

/**
 * 
 * @export
 * @interface GnOgcApiRecordsRecordGeoJSONPropertiesDto
 */
export interface GnOgcApiRecordsRecordGeoJSONPropertiesDto {
    /**
     * The extensions/conformance classes used in this record.
     * @type {Array<string>}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    conformsTo?: Array<string>;
    /**
     * The date this record was created in the server.
     * @type {Date}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    created?: Date;
    /**
     * The most recent date on which the record was changed.
     * @type {Date}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    updated?: Date;
    /**
     * The nature or genre of the resource. The value should be a code, convenient for filtering records. Where available, a link to the canonical URI of the record type resource will be added to the 'links' property.
     * @type {string}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    type?: string;
    /**
     * A human-readable name given to the resource.
     * @type {string}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    title?: string;
    /**
     * A free-text account of the resource.
     * @type {string}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    description?: string;
    /**
     * The topic or topics of the resource. Typically represented using free-form keywords, tags, key phrases, or classification codes.
     * @type {Array<string>}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    keywords?: Array<string>;
    /**
     * A knowledge organization system used to classify the resource.
     * @type {Array<GnOgcApiRecordsThemeDto>}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    themes?: Array<GnOgcApiRecordsThemeDto>;
    /**
     * 
     * @type {GnLanguage}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    language?: GnLanguage;
    /**
     * This list of languages in which this record is available.
     * @type {Array<GnLanguage>}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    languages?: Array<GnLanguage>;
    /**
     * The list of languages in which the resource described by this record is available.
     * @type {Array<GnLanguage>}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    resourceLanguages?: Array<GnLanguage>;
    /**
     * An identifier for the resource assigned by an external (to the catalog) entity.
     * @type {Array<GnOgcApiRecordsRecordCommonPropertiesExternalIdsInnerDto>}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    externalIds?: Array<GnOgcApiRecordsRecordCommonPropertiesExternalIdsInnerDto>;
    /**
     * A list of available distributions of the resource.
     * @type {Array<GnOgcApiRecordsFormatDto>}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    formats?: Array<GnOgcApiRecordsFormatDto>;
    /**
     * A list of contacts qualified by their role(s) in association to the record or the resource described by the record.
     * @type {Array<GnOgcApiRecordsContactDto>}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    contacts?: Array<GnOgcApiRecordsContactDto>;
    /**
     * 
     * @type {GnOgcApiRecordsLicenseDto}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    license?: GnOgcApiRecordsLicenseDto;
    /**
     * A statement that concerns all rights not addressed by the license such as a copyright statement.
     * @type {string}
     * @memberof GnOgcApiRecordsRecordGeoJSONPropertiesDto
     */
    rights?: string;
}

/**
 * Check if a given object implements the GnOgcApiRecordsRecordGeoJSONPropertiesDto interface.
 */
export function instanceOfGnOgcApiRecordsRecordGeoJSONPropertiesDto(value: object): value is GnOgcApiRecordsRecordGeoJSONPropertiesDto {
    return true;
}

export function GnOgcApiRecordsRecordGeoJSONPropertiesDtoFromJSON(json: any): GnOgcApiRecordsRecordGeoJSONPropertiesDto {
    return GnOgcApiRecordsRecordGeoJSONPropertiesDtoFromJSONTyped(json, false);
}

export function GnOgcApiRecordsRecordGeoJSONPropertiesDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): GnOgcApiRecordsRecordGeoJSONPropertiesDto {
    if (json == null) {
        return json;
    }
    return {
        
        'conformsTo': json['conformsTo'] == null ? undefined : json['conformsTo'],
        'created': json['created'] == null ? undefined : (new Date(json['created'])),
        'updated': json['updated'] == null ? undefined : (new Date(json['updated'])),
        'type': json['type'] == null ? undefined : json['type'],
        'title': json['title'] == null ? undefined : json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'keywords': json['keywords'] == null ? undefined : json['keywords'],
        'themes': json['themes'] == null ? undefined : ((json['themes'] as Array<any>).map(GnOgcApiRecordsThemeDtoFromJSON)),
        'language': json['language'] == null ? undefined : GnLanguageFromJSON(json['language']),
        'languages': json['languages'] == null ? undefined : ((json['languages'] as Array<any>).map(GnLanguageFromJSON)),
        'resourceLanguages': json['resourceLanguages'] == null ? undefined : ((json['resourceLanguages'] as Array<any>).map(GnLanguageFromJSON)),
        'externalIds': json['externalIds'] == null ? undefined : ((json['externalIds'] as Array<any>).map(GnOgcApiRecordsRecordCommonPropertiesExternalIdsInnerDtoFromJSON)),
        'formats': json['formats'] == null ? undefined : ((json['formats'] as Array<any>).map(GnOgcApiRecordsFormatDtoFromJSON)),
        'contacts': json['contacts'] == null ? undefined : ((json['contacts'] as Array<any>).map(GnOgcApiRecordsContactDtoFromJSON)),
        'license': json['license'] == null ? undefined : GnOgcApiRecordsLicenseDtoFromJSON(json['license']),
        'rights': json['rights'] == null ? undefined : json['rights'],
    };
}

export function GnOgcApiRecordsRecordGeoJSONPropertiesDtoToJSON(value?: GnOgcApiRecordsRecordGeoJSONPropertiesDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'conformsTo': value['conformsTo'],
        'created': value['created'] == null ? undefined : ((value['created']).toISOString()),
        'updated': value['updated'] == null ? undefined : ((value['updated']).toISOString()),
        'type': value['type'],
        'title': value['title'],
        'description': value['description'],
        'keywords': value['keywords'],
        'themes': value['themes'] == null ? undefined : ((value['themes'] as Array<any>).map(GnOgcApiRecordsThemeDtoToJSON)),
        'language': GnLanguageToJSON(value['language']),
        'languages': value['languages'] == null ? undefined : ((value['languages'] as Array<any>).map(GnLanguageToJSON)),
        'resourceLanguages': value['resourceLanguages'] == null ? undefined : ((value['resourceLanguages'] as Array<any>).map(GnLanguageToJSON)),
        'externalIds': value['externalIds'] == null ? undefined : ((value['externalIds'] as Array<any>).map(GnOgcApiRecordsRecordCommonPropertiesExternalIdsInnerDtoToJSON)),
        'formats': value['formats'] == null ? undefined : ((value['formats'] as Array<any>).map(GnOgcApiRecordsFormatDtoToJSON)),
        'contacts': value['contacts'] == null ? undefined : ((value['contacts'] as Array<any>).map(GnOgcApiRecordsContactDtoToJSON)),
        'license': GnOgcApiRecordsLicenseDtoToJSON(value['license']),
        'rights': value['rights'],
    };
}

