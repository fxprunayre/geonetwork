/* tslint:disable */
/* eslint-disable */
/**
 * GeoNetwork API
 * This API exposes endpoints to GeoNetwork API.
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: geonetwork-users@lists.sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GnRasterCornerCoordinates } from './GnRasterCornerCoordinates';
import {
  GnRasterCornerCoordinatesFromJSON,
  GnRasterCornerCoordinatesToJSON,
} from './GnRasterCornerCoordinates';
import type { GnRasterBand } from './GnRasterBand';
import { GnRasterBandFromJSON, GnRasterBandToJSON } from './GnRasterBand';

/**
 *
 * @export
 * @interface GnRasterInfo
 */
export interface GnRasterInfo {
  /**
   *
   * @type {string}
   * @memberof GnRasterInfo
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof GnRasterInfo
   */
  format?: string;
  /**
   *
   * @type {string}
   * @memberof GnRasterInfo
   */
  formatDescription?: string;
  /**
   *
   * @type {string}
   * @memberof GnRasterInfo
   */
  dataType?: GnRasterInfoDataTypeEnum;
  /**
   *
   * @type {string}
   * @memberof GnRasterInfo
   */
  crs?: string;
  /**
   *
   * @type {Array<number>}
   * @memberof GnRasterInfo
   */
  wgs84Extent?: Array<number>;
  /**
   *
   * @type {GnRasterCornerCoordinates}
   * @memberof GnRasterInfo
   */
  rasterCornerCoordinates?: GnRasterCornerCoordinates;
  /**
   *
   * @type {{ [key: string]: object; }}
   * @memberof GnRasterInfo
   */
  metadata?: { [key: string]: object };
  /**
   *
   * @type {Array<number>}
   * @memberof GnRasterInfo
   */
  size?: Array<number>;
  /**
   *
   * @type {Array<GnRasterBand>}
   * @memberof GnRasterInfo
   */
  bands?: Array<GnRasterBand>;
}

/**
 * @export
 */
export const GnRasterInfoDataTypeEnum = {
  Raster: 'RASTER',
  Vector: 'VECTOR',
} as const;
export type GnRasterInfoDataTypeEnum =
  (typeof GnRasterInfoDataTypeEnum)[keyof typeof GnRasterInfoDataTypeEnum];

/**
 * Check if a given object implements the GnRasterInfo interface.
 */
export function instanceOfGnRasterInfo(value: object): value is GnRasterInfo {
  return true;
}

export function GnRasterInfoFromJSON(json: any): GnRasterInfo {
  return GnRasterInfoFromJSONTyped(json, false);
}

export function GnRasterInfoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): GnRasterInfo {
  if (json == null) {
    return json;
  }
  return {
    description: json['description'] == null ? undefined : json['description'],
    format: json['format'] == null ? undefined : json['format'],
    formatDescription:
      json['formatDescription'] == null ? undefined : json['formatDescription'],
    dataType: json['dataType'] == null ? undefined : json['dataType'],
    crs: json['crs'] == null ? undefined : json['crs'],
    wgs84Extent: json['wgs84Extent'] == null ? undefined : json['wgs84Extent'],
    rasterCornerCoordinates:
      json['rasterCornerCoordinates'] == null
        ? undefined
        : GnRasterCornerCoordinatesFromJSON(json['rasterCornerCoordinates']),
    metadata: json['metadata'] == null ? undefined : json['metadata'],
    size: json['size'] == null ? undefined : json['size'],
    bands:
      json['bands'] == null
        ? undefined
        : (json['bands'] as Array<any>).map(GnRasterBandFromJSON),
  };
}

export function GnRasterInfoToJSON(value?: GnRasterInfo | null): any {
  if (value == null) {
    return value;
  }
  return {
    description: value['description'],
    format: value['format'],
    formatDescription: value['formatDescription'],
    dataType: value['dataType'],
    crs: value['crs'],
    wgs84Extent: value['wgs84Extent'],
    rasterCornerCoordinates: GnRasterCornerCoordinatesToJSON(
      value['rasterCornerCoordinates']
    ),
    metadata: value['metadata'],
    size: value['size'],
    bands:
      value['bands'] == null
        ? undefined
        : (value['bands'] as Array<any>).map(GnRasterBandToJSON),
  };
}
