/*
 * (c) 2003 Open Source Geospatial Foundation - all rights reserved
 * This code is licensed under the GPL 2.0 license,
 * available at the root application directory.
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package org.geonetwork.tasks.ogcapi.processes.generated;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import java.util.Optional;
import org.geonetwork.tasks.ogcapi.processes.generated.model.OgcApiProcessesExceptionDto;
import org.geonetwork.tasks.ogcapi.processes.generated.model.OgcApiProcessesExecute200ResponseDto;
import org.geonetwork.tasks.ogcapi.processes.generated.model.OgcApiProcessesExecuteDto;
import org.geonetwork.tasks.ogcapi.processes.generated.model.OgcApiProcessesProcessDto;
import org.geonetwork.tasks.ogcapi.processes.generated.model.OgcApiProcessesProcessListDto;
import org.geonetwork.tasks.ogcapi.processes.generated.model.OgcApiProcessesStatusInfoDto;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

@Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    date = "2024-08-06T16:12:06.105974013+02:00[Europe/Paris]",
    comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "Execute", description = "the Execute API")
public interface ProcessesApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * POST /processes/{processID}/execution : execute a process. Create a new job. For more
   * information, see [Section 7.11](https://docs.ogc.org/is/18-062/18-062.html#sc_create_job).
   *
   * @param processID (required)
   * @param ogcApiProcessesExecuteDto Mandatory execute request JSON (required)
   * @return Result of synchronous execution (status code 200) or Started asynchronous execution.
   *     Created job. (status code 201) or The requested URI was not found. (status code 404) or A
   *     server error occurred. (status code 500)
   */
  @Operation(
      operationId = "execute",
      summary = "execute a process.",
      description =
          "Create a new job.  For more information, see [Section"
              + " 7.11](https://docs.ogc.org/is/18-062/18-062.html#sc_create_job). ",
      tags = {"Execute"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Result of synchronous execution",
            content = {
              @Content(
                  mediaType = "/*",
                  schema = @Schema(implementation = OgcApiProcessesExecute200ResponseDto.class)),
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = OgcApiProcessesExecute200ResponseDto.class)),
              @Content(
                  mediaType = "text/html",
                  schema = @Schema(implementation = OgcApiProcessesExecute200ResponseDto.class))
            }),
        @ApiResponse(
            responseCode = "201",
            description = "Started asynchronous execution. Created job.",
            content = {
              @Content(
                  mediaType = "/*",
                  schema = @Schema(implementation = OgcApiProcessesStatusInfoDto.class)),
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = OgcApiProcessesStatusInfoDto.class)),
              @Content(
                  mediaType = "text/html",
                  schema = @Schema(implementation = OgcApiProcessesStatusInfoDto.class))
            }),
        @ApiResponse(
            responseCode = "404",
            description = "The requested URI was not found.",
            content = {
              @Content(
                  mediaType = "/*",
                  schema = @Schema(implementation = OgcApiProcessesExceptionDto.class)),
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = OgcApiProcessesExceptionDto.class)),
              @Content(
                  mediaType = "text/html",
                  schema = @Schema(implementation = OgcApiProcessesExceptionDto.class))
            }),
        @ApiResponse(
            responseCode = "500",
            description = "A server error occurred.",
            content = {
              @Content(
                  mediaType = "/*",
                  schema = @Schema(implementation = OgcApiProcessesExceptionDto.class)),
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = OgcApiProcessesExceptionDto.class)),
              @Content(
                  mediaType = "text/html",
                  schema = @Schema(implementation = OgcApiProcessesExceptionDto.class))
            })
      })
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/processes/{processID}/execution",
      produces = {"*/*", "application/json", "text/html"},
      consumes = {"application/json"})
  default ResponseEntity<OgcApiProcessesExecute200ResponseDto> execute(
      @Parameter(name = "processID", description = "", required = true, in = ParameterIn.PATH)
          @PathVariable("processID")
          String processID,
      @Parameter(
              name = "OgcApiProcessesExecuteDto",
              description = "Mandatory execute request JSON",
              required = true)
          @Valid
          @RequestBody
          OgcApiProcessesExecuteDto ogcApiProcessesExecuteDto) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("/*"))) {
                  String exampleString = "Custom MIME type example not yet supported: /*";
                  ApiUtil.setExampleResponse(request, "/*", exampleString);
                  break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"jobID\" : \"jobID\", \"processID\" : \"processID\", \"created\" :"
                          + " \"2000-01-23T04:56:07.000+00:00\", \"progress\" : 8, \"started\" :"
                          + " \"2000-01-23T04:56:07.000+00:00\", \"finished\" :"
                          + " \"2000-01-23T04:56:07.000+00:00\", \"links\" : [ { \"hreflang\" :"
                          + " \"en\", \"rel\" : \"service\", \"href\" : \"href\", \"type\" :"
                          + " \"application/json\", \"title\" : \"title\" }, { \"hreflang\" :"
                          + " \"en\", \"rel\" : \"service\", \"href\" : \"href\", \"type\" :"
                          + " \"application/json\", \"title\" : \"title\" } ], \"type\" :"
                          + " \"process\", \"message\" : \"message\", \"updated\" :"
                          + " \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"accepted\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"instance\" : \"instance\", \"detail\" : \"detail\", \"type\" : \"type\","
                          + " \"title\" : \"title\", \"status\" : 0 }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/html"))) {
                  String exampleString = "Custom MIME type example not yet supported: text/html";
                  ApiUtil.setExampleResponse(request, "text/html", exampleString);
                  break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"instance\" : \"instance\", \"detail\" : \"detail\", \"type\" : \"type\","
                          + " \"title\" : \"title\", \"status\" : 0 }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/html"))) {
                  String exampleString = "Custom MIME type example not yet supported: text/html";
                  ApiUtil.setExampleResponse(request, "text/html", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /processes/{processID} : retrieve a process description The process description contains
   * information about inputs and outputs and a link to the execution-endpoint for the process. The
   * Core does not mandate the use of a specific process description to specify the interface of a
   * process. That said, the Core requirements class makes the following recommendation:
   * Implementations SHOULD consider supporting the OGC process description. For more information,
   * see [Section 7.10](https://docs.ogc.org/is/18-062/18-062.html#sc_process_description).
   *
   * @param processID (required)
   * @return A process description. (status code 200) or The requested URI was not found. (status
   *     code 404)
   */
  @Operation(
      operationId = "getProcessDescription",
      summary = "retrieve a process description",
      description =
          "The process description contains information about inputs and outputs and a link to the"
              + " execution-endpoint for the process. The Core does not mandate the use of a"
              + " specific process description to specify the interface of a process. That said,"
              + " the Core requirements class makes the following recommendation:  Implementations"
              + " SHOULD consider supporting the OGC process description.  For more information,"
              + " see [Section"
              + " 7.10](https://docs.ogc.org/is/18-062/18-062.html#sc_process_description). ",
      tags = {"ProcessDescription"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "A process description.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = OgcApiProcessesProcessDto.class)),
              @Content(
                  mediaType = "text/html",
                  schema = @Schema(implementation = OgcApiProcessesProcessDto.class))
            }),
        @ApiResponse(
            responseCode = "404",
            description = "The requested URI was not found.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = OgcApiProcessesExceptionDto.class)),
              @Content(
                  mediaType = "text/html",
                  schema = @Schema(implementation = OgcApiProcessesExceptionDto.class))
            })
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/processes/{processID}",
      produces = {"application/json", "text/html"})
  default ResponseEntity<OgcApiProcessesProcessDto> getProcessDescription(
      @Parameter(name = "processID", description = "", required = true, in = ParameterIn.PATH)
          @PathVariable("processID")
          String processID) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"outputs\" : { \"key\" : { \"metadata\" : [ { \"role\" : \"role\","
                          + " \"href\" : \"href\", \"title\" : \"title\" }, { \"role\" : \"role\","
                          + " \"href\" : \"href\", \"title\" : \"title\" } ], \"keywords\" : ["
                          + " \"keywords\", \"keywords\" ], \"description\" : \"description\","
                          + " \"additionalParameters\" : { \"role\" : \"role\", \"href\" :"
                          + " \"href\", \"title\" : \"title\", \"parameters\" : [ { \"name\" :"
                          + " \"name\", \"value\" : [ \"additionalParameter_value_inner\","
                          + " \"additionalParameter_value_inner\" ] }, { \"name\" : \"name\","
                          + " \"value\" : [ \"additionalParameter_value_inner\","
                          + " \"additionalParameter_value_inner\" ] } ] }, \"title\" : \"title\" }"
                          + " }, \"metadata\" : [ { \"role\" : \"role\", \"href\" : \"href\","
                          + " \"title\" : \"title\" }, { \"role\" : \"role\", \"href\" : \"href\","
                          + " \"title\" : \"title\" } ], \"keywords\" : [ \"keywords\","
                          + " \"keywords\" ], \"inputs\" : { \"key\" : { \"schema\" : { \"$ref\" :"
                          + " \"$ref\" }, \"metadata\" : [ { \"role\" : \"role\", \"href\" :"
                          + " \"href\", \"title\" : \"title\" }, { \"role\" : \"role\", \"href\" :"
                          + " \"href\", \"title\" : \"title\" } ], \"keywords\" : [ \"keywords\","
                          + " \"keywords\" ], \"minOccurs\" : 0, \"description\" : \"description\","
                          + " \"additionalParameters\" : { \"role\" : \"role\", \"href\" :"
                          + " \"href\", \"title\" : \"title\", \"parameters\" : [ { \"name\" :"
                          + " \"name\", \"value\" : [ \"additionalParameter_value_inner\","
                          + " \"additionalParameter_value_inner\" ] }, { \"name\" : \"name\","
                          + " \"value\" : [ \"additionalParameter_value_inner\","
                          + " \"additionalParameter_value_inner\" ] } ] }, \"maxOccurs\" : 6,"
                          + " \"title\" : \"title\" } }, \"description\" : \"description\","
                          + " \"additionalParameters\" : { \"role\" : \"role\", \"href\" :"
                          + " \"href\", \"title\" : \"title\", \"parameters\" : [ { \"name\" :"
                          + " \"name\", \"value\" : [ \"additionalParameter_value_inner\","
                          + " \"additionalParameter_value_inner\" ] }, { \"name\" : \"name\","
                          + " \"value\" : [ \"additionalParameter_value_inner\","
                          + " \"additionalParameter_value_inner\" ] } ] }, \"links\" : [ {"
                          + " \"hreflang\" : \"en\", \"rel\" : \"service\", \"href\" : \"href\","
                          + " \"type\" : \"application/json\", \"title\" : \"title\" }, {"
                          + " \"hreflang\" : \"en\", \"rel\" : \"service\", \"href\" : \"href\","
                          + " \"type\" : \"application/json\", \"title\" : \"title\" } ], \"id\" :"
                          + " \"id\", \"title\" : \"title\", \"outputTransmission\" : ["
                          + " \"[value]\", \"[value]\" ], \"version\" : \"version\","
                          + " \"jobControlOptions\" : [ \"sync-execute\", \"sync-execute\" ] }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"instance\" : \"instance\", \"detail\" : \"detail\", \"type\" : \"type\","
                          + " \"title\" : \"title\", \"status\" : 0 }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/html"))) {
                  String exampleString = "Custom MIME type example not yet supported: text/html";
                  ApiUtil.setExampleResponse(request, "text/html", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /processes : retrieve the list of available processes The list of processes contains a
   * summary of each process the OGC API - Processes offers, including the link to a more detailed
   * description of the process. For more information, see [Section
   * 7.9](https://docs.ogc.org/is/18-062/18-062.html#sc_process_list).
   *
   * @return Information about the available processes (status code 200)
   */
  @Operation(
      operationId = "getProcesses",
      summary = "retrieve the list of available processes",
      description =
          "The list of processes contains a summary of each process the OGC API - Processes offers,"
              + " including the link to a more detailed description of the process.  For more"
              + " information, see [Section"
              + " 7.9](https://docs.ogc.org/is/18-062/18-062.html#sc_process_list). ",
      tags = {"ProcessList"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Information about the available processes",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = OgcApiProcessesProcessListDto.class))
            })
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/processes",
      produces = {"application/json"})
  default ResponseEntity<OgcApiProcessesProcessListDto> getProcesses() {

    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"processes\" : [ { \"metadata\" : [ { \"role\" : \"role\", \"href\" :"
                          + " \"href\", \"title\" : \"title\" }, { \"role\" : \"role\", \"href\" :"
                          + " \"href\", \"title\" : \"title\" } ], \"keywords\" : [ \"keywords\","
                          + " \"keywords\" ], \"description\" : \"description\","
                          + " \"additionalParameters\" : { \"role\" : \"role\", \"href\" :"
                          + " \"href\", \"title\" : \"title\", \"parameters\" : [ { \"name\" :"
                          + " \"name\", \"value\" : [ \"additionalParameter_value_inner\","
                          + " \"additionalParameter_value_inner\" ] }, { \"name\" : \"name\","
                          + " \"value\" : [ \"additionalParameter_value_inner\","
                          + " \"additionalParameter_value_inner\" ] } ] }, \"links\" : [ {"
                          + " \"hreflang\" : \"en\", \"rel\" : \"service\", \"href\" : \"href\","
                          + " \"type\" : \"application/json\", \"title\" : \"title\" }, {"
                          + " \"hreflang\" : \"en\", \"rel\" : \"service\", \"href\" : \"href\","
                          + " \"type\" : \"application/json\", \"title\" : \"title\" } ], \"id\" :"
                          + " \"id\", \"title\" : \"title\", \"outputTransmission\" : ["
                          + " \"[value]\", \"[value]\" ], \"version\" : \"version\","
                          + " \"jobControlOptions\" : [ \"sync-execute\", \"sync-execute\" ] }, {"
                          + " \"metadata\" : [ { \"role\" : \"role\", \"href\" : \"href\","
                          + " \"title\" : \"title\" }, { \"role\" : \"role\", \"href\" : \"href\","
                          + " \"title\" : \"title\" } ], \"keywords\" : [ \"keywords\","
                          + " \"keywords\" ], \"description\" : \"description\","
                          + " \"additionalParameters\" : { \"role\" : \"role\", \"href\" :"
                          + " \"href\", \"title\" : \"title\", \"parameters\" : [ { \"name\" :"
                          + " \"name\", \"value\" : [ \"additionalParameter_value_inner\","
                          + " \"additionalParameter_value_inner\" ] }, { \"name\" : \"name\","
                          + " \"value\" : [ \"additionalParameter_value_inner\","
                          + " \"additionalParameter_value_inner\" ] } ] }, \"links\" : [ {"
                          + " \"hreflang\" : \"en\", \"rel\" : \"service\", \"href\" : \"href\","
                          + " \"type\" : \"application/json\", \"title\" : \"title\" }, {"
                          + " \"hreflang\" : \"en\", \"rel\" : \"service\", \"href\" : \"href\","
                          + " \"type\" : \"application/json\", \"title\" : \"title\" } ], \"id\" :"
                          + " \"id\", \"title\" : \"title\", \"outputTransmission\" : ["
                          + " \"[value]\", \"[value]\" ], \"version\" : \"version\","
                          + " \"jobControlOptions\" : [ \"sync-execute\", \"sync-execute\" ] } ],"
                          + " \"links\" : [ { \"hreflang\" : \"en\", \"rel\" : \"service\","
                          + " \"href\" : \"href\", \"type\" : \"application/json\", \"title\" :"
                          + " \"title\" }, { \"hreflang\" : \"en\", \"rel\" : \"service\", \"href\""
                          + " : \"href\", \"type\" : \"application/json\", \"title\" : \"title\" }"
                          + " ] }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
