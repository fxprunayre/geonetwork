/*
 * (c) 2003 Open Source Geospatial Foundation - all rights reserved
 * This code is licensed under the GPL 2.0 license,
 * available at the root application directory.
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package org.geonetwork.tasks.ogcapi.processes.generated;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import java.util.Optional;
import org.geonetwork.tasks.ogcapi.processes.generated.model.OgcApiProcessesExceptionDto;
import org.geonetwork.tasks.ogcapi.processes.generated.model.OgcApiProcessesLandingPageDto;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

@Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    date = "2024-08-06T16:12:06.105974013+02:00[Europe/Paris]",
    comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "Capabilities", description = "the Capabilities API")
public interface DefaultApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * GET / : landing page of this API The landing page provides links to the: * The APIDefinition
   * (no fixed path), * The Conformance statements (path /conformance), * The processes metadata
   * (path /processes), * The endpoint for job monitoring (path /jobs). For more information, see
   * [Section 7.2](https://docs.ogc.org/is/18-062/18-062.html#sc_landing_page).
   *
   * @return The landing page provides links to the API definition (link relations
   *     &#x60;service-desc&#x60; and &#x60;service-doc&#x60;), the Conformance declaration (path
   *     &#x60;/conformance&#x60;, link relation
   *     &#x60;http://www.opengis.net/def/rel/ogc/1.0/conformance&#x60;), and to other resources.
   *     (status code 200) or A server error occurred. (status code 500)
   */
  @Operation(
      operationId = "getLandingPage",
      summary = "landing page of this API",
      description =
          "The landing page provides links to the:   * The APIDefinition (no fixed path),   * The"
              + " Conformance statements (path /conformance),   * The processes metadata (path"
              + " /processes),   * The endpoint for job monitoring (path /jobs).  For more"
              + " information, see [Section"
              + " 7.2](https://docs.ogc.org/is/18-062/18-062.html#sc_landing_page).",
      tags = {"Capabilities"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description =
                "The landing page provides links to the API definition (link relations"
                    + " `service-desc` and `service-doc`), the Conformance declaration (path"
                    + " `/conformance`, link relation"
                    + " `http://www.opengis.net/def/rel/ogc/1.0/conformance`), and to other"
                    + " resources.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = OgcApiProcessesLandingPageDto.class)),
              @Content(
                  mediaType = "text/html",
                  schema = @Schema(implementation = OgcApiProcessesLandingPageDto.class))
            }),
        @ApiResponse(
            responseCode = "500",
            description = "A server error occurred.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = OgcApiProcessesExceptionDto.class)),
              @Content(
                  mediaType = "text/html",
                  schema = @Schema(implementation = OgcApiProcessesExceptionDto.class))
            })
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/",
      produces = {"application/json", "text/html"})
  default ResponseEntity<OgcApiProcessesLandingPageDto> getLandingPage() {

    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"description\" : \"Example server implementing the OGC API - Processes"
                          + " 1.0 Standard\", \"links\" : [ { \"hreflang\" : \"en\", \"rel\" :"
                          + " \"service\", \"href\" : \"href\", \"type\" : \"application/json\","
                          + " \"title\" : \"title\" }, { \"hreflang\" : \"en\", \"rel\" :"
                          + " \"service\", \"href\" : \"href\", \"type\" : \"application/json\","
                          + " \"title\" : \"title\" } ], \"title\" : \"Example processing server\""
                          + " }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/html"))) {
                  String exampleString = "Custom MIME type example not yet supported: text/html";
                  ApiUtil.setExampleResponse(request, "text/html", exampleString);
                  break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"instance\" : \"instance\", \"detail\" : \"detail\", \"type\" : \"type\","
                          + " \"title\" : \"title\", \"status\" : 0 }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("text/html"))) {
                  String exampleString = "Custom MIME type example not yet supported: text/html";
                  ApiUtil.setExampleResponse(request, "text/html", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
